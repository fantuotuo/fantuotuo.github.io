(function (global, factory) {
	if (typeof define === "function" && define.amd) {
		define(["exports"], factory);
	} else if (typeof exports !== "undefined") {
		factory(exports);
	} else {
		var mod = {
			exports: {}
		};
		factory(mod.exports);
		global.GLB = mod.exports;
	}
})(this, function (exports) {
	"use strict";

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.default = {
		changeScene: function changeScene() {},

		res: {},
		handler_timeout: undefined,
		W: 900,
		H: 1600,
		CAMERA_WIDTH: 20,

		game_scene: undefined,
		shadowEnable: function shadowEnable(obj, type) {
			var prop = "castShadow";
			if (type == 0) {
				prop = "receiveShadow";
			}
			obj[prop] = true;
			if (!obj.children) return;
			for (var i = 0; i < obj.children.length; i++) {
				obj.children[i][prop] = true;
				this.shadowEnable(obj.children[i], type);
			}
		},
		lowReflect: function lowReflect(scene) {
			for (var i = 0; i < scene.children.length; i++) {
				var mat = scene.children[i].material;
				mat.specular = new THREE.Color(0.2, 0.2, 0.2);
				mat.reflectivity = 0.02;
				mat.shininess = 2;
			}
		},

		BASE_SCALE: 1

	};
});
(function (global, factory) {
	if (typeof define === "function" && define.amd) {
		define(["exports", "GLB.js"], factory);
	} else if (typeof exports !== "undefined") {
		factory(exports, require("GLB.js"));
	} else {
		var mod = {
			exports: {}
		};
		factory(mod.exports, global.GLB);
		global.Sound = mod.exports;
	}
})(this, function (exports, _GLB) {
	"use strict";

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.default = Sound;

	var _GLB2 = _interopRequireDefault(_GLB);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : {
			default: obj
		};
	}

	var SUPPORT_AUDIO = window.AudioContext || window.webkitAudioContext ? true : false;
	function Sound(listener, url) {
		if (SUPPORT_AUDIO) {
			this.__proto__ = new THREE.Audio(listener);
			if (_GLB2.default.res[url]) {
				this.setBuffer(_GLB2.default.res[url]);
			}
		} else {
			// 兼容IE
			var embed;
			this.play = function () {
				embed = document.createElement("audio");
				$(embed).attr("style", "display:none");
				$(embed).attr("autoplay", "autoplay");
				$(embed).attr("src", "assets/" + url);
				$("#game-player").append(embed);

				this.isPlaying = true;
			};
			this.stop = function (all) {
				if (all) {
					$("#game-player audio").remove();
				} else {
					$(embed).remove();
				}
			};
		}

		this.url = url;
		this.isPlaying = false;
	}
});
(function (global, factory) {
	if (typeof define === "function" && define.amd) {
		define(["exports", "GLB.js"], factory);
	} else if (typeof exports !== "undefined") {
		factory(exports, require("GLB.js"));
	} else {
		var mod = {
			exports: {}
		};
		factory(mod.exports, global.GLB);
		global.GameScene = mod.exports;
	}
})(this, function (exports, _GLB) {
	"use strict";

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.default = SceneInit;

	var _GLB2 = _interopRequireDefault(_GLB);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : {
			default: obj
		};
	}

	var W = _GLB2.default.W;
	var H = _GLB2.default.H;
	var RANGE = 30;
	var BILI = W / H;
	var SUPPORT_AUDIO = window.AudioContext || window.webkitAudioContext ? true : false;
	var K_SUB_CAM = 0.8;

	var CAMERA_OFF_SET = {
		x: -1,
		y: -1,
		z: 0.9
	};
	var FLIP_CODE = {
		37: 3,
		38: 0,
		39: 1,
		40: 2
	};

	function SceneInit() {
		var camera_d = Math.pow(2, 0.5),
		    camera_r = -Math.PI * 3 / 4;

		this.req_id = undefined;
		var width_container = $("#game-player").width();
		var height_container = $("#game-player").height();

		function resize() {
			width_container = $("#game-player").width();
			height_container = $("#game-player").height();
		}
		window.addEventListener("resize", resize);

		var manager = new THREE.LoadingManager();
		manager.onProgress = function (i, loaded, total) {
			// console.log(loaded+"|"+total)
			// console.log("loading..."+Math.floor(100*loaded/total)+"%");
		};
		this.manager = manager;

		var container = $("#game-player")[0];
		var canvas;
		var scene, renderer;
		var camera_main; // 主相机

		var camera_sub1, camera_sub2; // 分相机
		var camera_sub_enabled = false; // 分相机是否开启

		generateRenderer.bind(this)();
		generateScene.bind(this)();

		var listener = null;
		if (SUPPORT_AUDIO) {
			listener = new THREE.AudioListener();
			// camera.add(listener);
		}
		this.listener = listener;

		var ambientLight, directionalLight;
		generateLights.bind(this)();
		generateCamera.bind(this)();
		generateHelper.bind(this)();
		generateRender.bind(this)();
		generateAPI.bind(this)();

		this.startRender();

		function generateScene() {
			scene = new THREE.Scene();
		}
		function generateCamera() {
			camera_main = new THREE.OrthographicCamera(RANGE * BILI / -2, RANGE * BILI / 2, RANGE / 2, RANGE / -2, -20, 20);
			// camera_main.position.set(CAMERA_OFF_SET.x,CAMERA_OFF_SET.y,CAMERA_OFF_SET.z);
			camera_main.position.set(camera_d * Math.cos(camera_r), camera_d * Math.sin(camera_r), CAMERA_OFF_SET.z);

			camera_main.up = new THREE.Vector3(0, 0, 1);
			camera_main.updateProjectionMatrix();
			camera_main.lookAt(scene.position);

			// 此相机可以运动
			camera_sub1 = new THREE.PerspectiveCamera(45, BILI * K_SUB_CAM, 0.1, 100);
			// camera_sub1 = new THREE.OrthographicCamera( RANGE * BILI / - 2, RANGE * BILI / 2, RANGE / 2, RANGE / - 2, -200, 200 );
			camera_sub1.up = new THREE.Vector3(0, 1, 0);
			camera_sub1.updateProjectionMatrix();
			camera_sub1.position.set(0, 0, 1.3);
			camera_sub1.lookAt(0, 0, 0.15);
			var cameraPerspectiveHelper = new THREE.CameraHelper(camera_sub1);
			// scene.add( cameraPerspectiveHelper );

			// 此相机固定水平视角
			camera_sub2 = new THREE.PerspectiveCamera(45, BILI * K_SUB_CAM, 0.1, 100);
			// camera_sub2 = new THREE.OrthographicCamera( RANGE * BILI / - 2, RANGE * BILI / 2, RANGE / 2, RANGE / - 2, -200, 200 );
			camera_sub2.up = new THREE.Vector3(0, 1, 0);
			camera_sub2.updateProjectionMatrix();
			camera_sub2.position.set(0, 0, 1.3);
			camera_sub2.lookAt(0, 0, 0.15);
		}
		function generateRenderer() {
			if (!!window.ActiveXObject || "ActiveXObject" in window) {
				createRenderIE();
			} else {
				createRenderOther();
			}
			renderer.autoClear = false;
			function createRenderIE() {
				renderer = new THREE.WebGLRenderer({ antialias: true });
				renderer.setSize(W, H);
				renderer.shadowMap.enabled = true;
				renderer.setPixelRatio(window.devicePixelRatio);
				container.appendChild(renderer.domElement);
			}
			function createRenderOther() {
				canvas = document.createElement('canvas');
				container.appendChild(canvas);
				renderer = new THREE.WebGLRenderer(canvas.getContext('webgl'));
				renderer.setSize(W, H);
				renderer.shadowMap.enabled = true;
			}
		}

		var camera_sub1_target = {},
		    camera_sub1_dir = {},
		    camera_sub1_target_up = {},
		    camera_sub1_dir_up = {},
		    pos_ready = {};
		function generateRender() {
			this.startRender = function () {
				this.endRender();
				render.bind(this)();
			};
			var c = 0;
			function render(timestamp) {
				c++;
				for (var i = 0; i < scene.children.length; i++) {
					if (scene.children[i].MyAPI && scene.children[i].MyAPI.render) {
						scene.children[i].MyAPI.render.bind(scene.children[i])(timestamp);
					}
				}
				renderer.clear();

				renderer.setViewport(0, 0, W, H);
				renderer.render(scene, camera_main);

				if (camera_sub_enabled) {
					if (camera_sub1_target.x != undefined) {
						var x = camera_sub1.position.x + camera_sub1_dir.x,
						    y = camera_sub1.position.y + camera_sub1_dir.y,
						    z = camera_sub1.position.z + camera_sub1_dir.z;

						camera_sub1.up = new THREE.Vector3(0, 0, 1);
						camera_sub1.updateProjectionMatrix();
						camera_sub1.position.set(x, y, z);
						camera_sub1.lookAt(0, 0, 0.15);

						if ((camera_sub1_target.x - x) * camera_sub1_dir.x <= 0) {
							camera_sub1.up = new THREE.Vector3(0, 0, 1);
							camera_sub1.updateProjectionMatrix();
							camera_sub1.position.set(camera_sub1_target.x, camera_sub1_target.y, camera_sub1_target.z);
							camera_sub1.lookAt(0, 0, 0.15);

							camera_sub1_target = {};
							camera_sub1_dir = {};
						}
					}
					if (camera_sub1_target_up.x != undefined) {
						var _x = camera_sub1.up.x + camera_sub1_dir_up.x,
						    _y = camera_sub1.up.y + camera_sub1_dir_up.y,
						    _z = camera_sub1.up.z + camera_sub1_dir_up.z;

						camera_sub1.up = new THREE.Vector3(_x, _y, _z);
						camera_sub1.updateProjectionMatrix();
						camera_sub1.lookAt(0, 0, 0.15);

						if ((camera_sub1_target_up.x - _x) * camera_sub1_dir_up.x <= 0) {
							camera_sub1.up = new THREE.Vector3(camera_sub1_target_up.x, camera_sub1_target_up.y, camera_sub1_target_up.z);
							camera_sub1.updateProjectionMatrix();
							camera_sub1.lookAt(0, 0, 0.15);

							camera_sub1_target_up = {};
							camera_sub1_dir_up = {};
							getDir();
						}
					}
					renderer.setViewport(W * 1 / 16, H * 2 / 16, W * 3 / 8, H * 3 / 8 * (1 / K_SUB_CAM));
					renderer.render(scene, camera_sub1);
					// camera_sub1.position.z+=0.01
					// camera_sub1.position.y=0.6*Math.sin(c/300);
					// camera_sub1.position.z=0.6*Math.cos(c/300);
					// camera_sub1.lookAt(scene.position);
					camera_sub1.updateMatrixWorld();

					renderer.setViewport(W * 9 / 16, H * 2 / 16, W * 3 / 8, H * 3 / 8 * (1 / K_SUB_CAM));
					renderer.render(scene, camera_sub2);
					camera_sub2.updateMatrixWorld();
				}

				this.req_id = requestAnimationFrame(render.bind(this));
			}

			this.endRender = function () {
				if (this.req_id != undefined) {
					cancelAnimationFrame(this.req_id);
				}
			};
		}
		function generateLights() {
			ambientLight = new THREE.AmbientLight(0xff4444, 0.1);
			scene.add(ambientLight);
			directionalLight = new THREE.DirectionalLight(0xffff00, 1.0);
			directionalLight = new THREE.SpotLight(0xffff00, 1.2, 80, 40 * Math.PI / 180, 0.8, 2);
			directionalLight.position.set(0, -8, 8);
			scene.add(directionalLight);
			directionalLight.castShadow = true;
			// directionalLight.shadow.camera.near = 0;
			// directionalLight.shadow.camera.far =18;
			// directionalLight.shadow.camera.left = -6;
			// directionalLight.shadow.camera.right = 6;
			// directionalLight.shadow.camera.top = 6;
			// directionalLight.shadow.camera.bottom = -6;
			directionalLight.shadow.camera.near = 1;
			directionalLight.shadow.camera.far = 10;
			directionalLight.shadow.camera.fov = 10;
			this.changeColor = function (type) {
				var color = new THREE.Color(1, 1, 1);
				if (type == 1) {
					// help界面平行光颜色
					color = new THREE.Color(1, 0.7, 1);
				}
				// directionalLight.color=color;
			};
			directionalLight.shadow.mapSize.x = 1024;
			directionalLight.shadow.mapSize.y = 1024;
		}
		function generateHelper() {
			var gridHelper = new THREE.GridHelper(20, 20);
			// scene.add( gridHelper );
			var helper = new THREE.CameraHelper(directionalLight.shadow.camera);
			// scene.add(helper);
		}
		function generateAPI() {
			this.addToScene = function (obj) {
				scene.add(obj);
			};
			this.removeFromScene = function (obj) {
				scene.remove(obj);
			};
			this.lookAt = function (pos) {
				var c_x = pos.x + CAMERA_OFF_SET.x,
				    c_y = pos.y + CAMERA_OFF_SET.y,
				    c_z = pos.z + CAMERA_OFF_SET.z;
				camera.position.set(c_x, c_y, c_z);
				camera.lookAt(pos);
			};

			var ua = navigator.userAgent;
			var ipad = ua.match(/(iPad).*OS\s([\d_]+)/),
			    isIphone = !ipad && ua.match(/(iPhone\sOS)\s([\d_]+)/),
			    isAndroid = ua.match(/(Android)\s+([\d.]+)/),
			    isMobile = isIphone || isAndroid;
			var mi = ua.match(/XiaoMi/i); // 小米（手机或平板）

			this.addClickEvent = function (objects, str_name, fn, cancelEventAfter, cancelEventPre, camera) {
				camera = camera == undefined ? camera_main : camera_sub1;
				var obj = [];
				objects.forEach(function (child) {
					if (!(child instanceof THREE.Sprite)) {
						obj.push(child);
					}
				});
				(cancelEventPre === undefined || cancelEventPre === true) && removeEvent.bind(this)();
				// $("#game-player")[0].addEventListener("touchstart",touch);
				// $("#game-player")[0].addEventListener("click",click);
				if (isMobile || ipad || mi) {
					$("#game-player").bind("touchstart", touch);
				} else {
					$("#game-player").bind("click", click);
				}

				function removeEvent() {
					// $("#game-player")[0].removeEventListener("touchstart",touch);
					// $("#game-player")[0].removeEventListener("click",click);
					$("#game-player").unbind("click");
					$("#game-player").unbind("touchstart");
				}
				function click(ev) {
					var e = ev.originalEvent;
					var mouse = {};
					mouse.x = e.offsetX / width_container * 2 - 1;
					mouse.y = -(e.offsetY / height_container) * 2 + 1;

					var raycaster = new THREE.Raycaster();
					raycaster.setFromCamera(mouse, camera);
					var intersects = raycaster.intersectObjects(obj);

					if (intersects.length > 0) {
						//选中第一个射线相交的物体
						var SELECTED = intersects[0].object;
						var intersected = intersects[0].object;
						if (str_name == "" || intersected.name == str_name) {
							if (cancelEventAfter === true) {
								removeEvent.bind(this)();
							}
							fn(intersected);
						}
					}
				}
				function touch(ev) {
					var e = ev.originalEvent;
					var off_x = e.targetTouches[0].clientX - $("#game-player")[0].offsetLeft;
					var off_y = e.targetTouches[0].clientY - $("#game-player")[0].offsetTop;

					var mouse = {};
					mouse.x = off_x / width_container * 2 - 1;
					mouse.y = -(off_y / height_container) * 2 + 1;

					var raycaster = new THREE.Raycaster();
					raycaster.setFromCamera(mouse, camera);
					var intersects = raycaster.intersectObjects(obj);

					if (intersects.length > 0) {
						//选中第一个射线相交的物体
						var SELECTED = intersects[0].object;
						var intersected = intersects[0].object;
						if (str_name == "" || intersected.name == str_name) {
							if (cancelEventAfter === true) {
								removeEvent.bind(this)();
							}
							fn(intersected);
						}
					}
				}
			};

			/**
    * 开启/关闭多相机模式（主相机切换到背景的位置）
    * @param  {[type]} bool [开启/关闭]
    */
			this.subCameraEnable = function (bool) {
				if (bool) {
					camera_main.position.set(0, -1998, 0);
					camera_main.near = -1000;
					camera_main.far = 10;
					camera_main.updateProjectionMatrix();
				} else {
					camera_main.position.set(CAMERA_OFF_SET.x, CAMERA_OFF_SET.y, CAMERA_OFF_SET.z);
					camera_main.near = -20;
					camera_main.far = 20;
					camera_main.updateProjectionMatrix();
				}
			};
			/**
    * 打开/关闭子相机（子相机的景物显示）
    * @param  {[type]} bool [打开/关闭]
    */
			this.enableCameraSub = function (bool) {
				camera_sub_enabled = bool;
			};
			// 1号相机视角初始化（不带动画）
			this.changeViewSub1Now = function () {
				camera_sub1_target = {}, camera_sub1_dir = {}, camera_sub1_target_up = {}, camera_sub1_dir_up = {}, camera_sub1.up = new THREE.Vector3(0, 1, 0);
				camera_sub1.updateProjectionMatrix();
				camera_sub1.position.set(0, 0, 2.6);
				camera_sub1.lookAt(0, 0, 0.15);
			};
			// 相机动画开始
			this.changeViewSub1 = function (pos) {
				if (camera_sub1_target.x != undefined || camera_sub1_target_up.x != undefined) return; // 相机正在动画，不响应相机动画
				pos_ready = pos;
				if (pos.z != camera_sub1.position.z) {
					getUp();
				} else {
					getDir();
				}
				// setTimeout(getDir,1000);
				function getUp() {
					var x = -pos.x - camera_sub1.up.x,
					    y = -pos.y - camera_sub1.up.y,
					    z = 0 - camera_sub1.up.z;
					var l = Math.pow(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2), 0.5);
					if (l != 0) {
						// 相机动画速度
						var speed = 0.01;
						x *= speed / l;
						y *= speed / l;
						z *= speed / l;
						camera_sub1_target_up = { x: -pos.x, y: -pos.y, z: 0 };
						camera_sub1_dir_up = { x: x, y: y, z: z };
					}
				}
			};
			// 重置2号分相机的视角
			this.changeViewSub2 = function (pos) {
				camera_sub2.up = new THREE.Vector3(0, 0, 1);
				camera_sub2.updateProjectionMatrix();
				camera_sub2.position.set(pos.x, pos.y, pos.z);
				camera_sub2.lookAt(0, 0, 0.15);
			};
		}

		function findUp(tar, cam) {
			var z = void 0,
			    up = void 0;
			if (cam.z <= tar.z) {
				z = 1;
				up = { x: 0, y: 0, z: z };
				return up;
			} else {
				z = (Math.pow(cam.x - tar.x, 2) + Math.pow(cam.y - tar.y, 2)) / (cam.z - tar.z) + cam.z;
			}
			up = { x: tar.x - cam.x, y: tar.y - cam.y, z: z - cam.z };

			return up;
		}
		function getDir(pos) {
			pos = pos_ready;

			var p = { x: pos.x, y: pos.y, z: pos.z };
			// p.z=camera_sub1.position.z;
			var x = p.x - camera_sub1.position.x,
			    y = p.y - camera_sub1.position.y,
			    z = p.z - camera_sub1.position.z;
			var l = Math.pow(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2), 0.5);
			if (l != 0) {
				// 相机动画速度
				var speed = 0.01;
				x *= speed / l;
				y *= speed / l;
				z *= speed / l;
				camera_sub1_target = { x: p.x, y: p.y, z: p.z };
				camera_sub1_dir = { x: x, y: y, z: z };
			}
		}
		this.addTouch = function () {
			unbind();

			var ua = navigator.userAgent;
			var ipad = ua.match(/(iPad).*OS\s([\d_]+)/),
			    isIphone = !ipad && ua.match(/(iPhone\sOS)\s([\d_]+)/),
			    isAndroid = ua.match(/(Android)\s+([\d.]+)/),
			    isMobile = isIphone || isAndroid;
			var mi = ua.match(/XiaoMi/i); // 小米（手机或平板）

			bind();

			var o_x = 0,
			    o_y = 0,
			    scale = 0.01;

			function touchStart(e) {
				e.preventDefault();
				unbind();
				$(document).bind("touchmove", touchMove);
				$(document).bind("touchend", touchEnd);

				var ev = e.originalEvent;
				o_x = ev.targetTouches[0].clientX;
				o_y = ev.targetTouches[0].clientY;
			}
			function touchMove(e) {
				e.preventDefault();
				var ev = e.originalEvent;
				var x = ev.targetTouches[0].clientX,
				    y = ev.targetTouches[0].clientY;
				var dx = x - o_x;
				camera_r -= dx * scale;
				o_x = x;
				o_y = y;

				update();
			}
			function touchEnd(e) {
				e.preventDefault();
				o_x = 0;
				o_y = 0;
				unbind();
				bind();
			}
			function mouseDown(e) {
				unbind();
				$(document).bind("mousemove", mouseMove);
				$(document).bind("mouseup", mouseUp);

				o_x = e.pageX;
				o_y = e.pageY;
			}
			function mouseMove(e) {
				var x = e.pageX,
				    y = e.pageY;
				var dx = x - o_x;
				camera_r -= dx * scale;
				o_x = e.pageX;
				o_y = e.pageY;

				update();
			}
			function mouseUp(e) {
				o_x = 0;
				o_y = 0;
				unbind();
				bind();
			}

			function update() {
				camera_main.position.set(camera_d * Math.cos(camera_r), camera_d * Math.sin(camera_r), CAMERA_OFF_SET.z);

				camera_main.up = new THREE.Vector3(0, 0, 1);
				camera_main.updateProjectionMatrix();
				camera_main.lookAt(scene.position);
			}
			function bind() {
				if (isMobile || ipad || mi) {
					$(document).bind("touchstart", touchStart);
				} else {
					$(document).bind("mousedown", mouseDown);
				}
			}
			function unbind() {
				$(document).unbind("mousedown");
				$(document).unbind("mousemove");
				$(document).unbind("mouseup");
				$(document).unbind("touchstart");
				$(document).unbind("touchmove");
				$(document).unbind("touchend");
			}
		};
	}
});
(function (global, factory) {
	if (typeof define === "function" && define.amd) {
		define(['exports', './out/GLB.js', './out/Btn.js'], factory);
	} else if (typeof exports !== "undefined") {
		factory(exports, require('./out/GLB.js'), require('./out/Btn.js'));
	} else {
		var mod = {
			exports: {}
		};
		factory(mod.exports, global.GLB, global.Btn);
		global.GameStartPanel = mod.exports;
	}
})(this, function (exports, _GLB, _Btn) {
	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.default = GameStartPanel;

	var _GLB2 = _interopRequireDefault(_GLB);

	var _Btn2 = _interopRequireDefault(_Btn);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : {
			default: obj
		};
	}

	var W = _GLB2.default.W;
	var H = _GLB2.default.H;
	var BILI = W / H;
	var CAMERA_WIDTH = 20;

	function GameStartPanel(game_scene) {
		this.__proto__ = new THREE.Group();
		this.position.set(0, 0, -4);

		this.MyAPI = {};

		var scale = 0.03;
		var baohe = _GLB2.default.res["baohe.fbx"];
		baohe.scale.set(scale, scale, scale);
		_GLB2.default.shadowEnable(baohe, 0);
		_GLB2.default.shadowEnable(baohe, 1);
		_GLB2.default.lowReflect(baohe);
		this.add(baohe);
		// var mat=new THREE.MeshLambertMaterial({color:0xff0000})
		// var a=new THREE.Mesh(new THREE.CubeGeometry(1,1,1),mat);
		// this.add(a);
		// a.position.set(0,0,8);
		// a.castShadow=true;
		// a.receiveShadow=true;
		// var b=new THREE.Mesh(new THREE.CubeGeometry(5,5,1),mat);
		// this.add(b);
		// b.position.set(0,0,6);
		// b.castShadow=true;
		// // a.receiveShadow=true;

		var floors = [];
		var g0,
		    g1 = _GLB2.default.res["g1.fbx"];
		var g1c = g1.children[0];
		var off = -4.5;
		g1c.position.set(0, off / scale, 0);
		g1.position.set(0, -off, 1.9 * scale / 0.03);
		g1.castShadow = true;g1.receiveShadow = true;
		g1.scale.set(scale, scale, scale);
		_GLB2.default.shadowEnable(g1, 0);
		_GLB2.default.shadowEnable(g1, 1);
		_GLB2.default.lowReflect(g1);
		this.add(g1);
		for (var i = 0; i < baohe.children.length; i++) {
			var obj = baohe.children[i];
			switch (obj.name) {
				case "p0":
					floors[0] = obj;
					// obj.visible=true;
					break;
				case "p1":
					floors[1] = obj;
					// obj.visible=false;
					break;
				case "p2":
					floors[2] = obj;
					// obj.visible=false;
					break;
				case "p3":
					floors[3] = obj;
					// obj.visible=false;
					break;
				case "p4":
					floors[4] = obj;
					// obj.visible=false;
					break;
				case "g0":
					g0 = obj;
					// obj.visible=false;
					break;
				case "g1":
					// baohe.remove(obj);
					obj.visible = false;
					break;
			}
		}

		var z = 2;
		var g_plus = -0.0015,
		    p_r_arr = [0, 0, 0, 0, 0, 0],
		    p_z_arr = [0, 0, 0, 0, 0, 0],
		    z_max_arr = [1.2, 1.5, 1.5, 1.3, 2.8],
		    r_plus_arr = [0.001, -0.002, 0.002, -0.002, 0.002],
		    r_scale = 2,
		    z_plus = 0.002;
		var start = false;
		this.MyAPI.init = function () {
			start = true;

			// var s=new THREE.Audio(game_scene.listener);
			// s.setBuffer(GLB.res["m.mp3"]);
			// s.play();

			init();
		};
		var r = 0;
		var current_index = -1;
		this.MyAPI.render = function (timestamp) {
			var p_z = 0,
			    p_r = 0;
			for (var _i = 0; _i < floors.length; _i++) {
				p_z += p_z_arr[_i];
				p_r += p_r_arr[_i];
				floors[_i].position.set(0, 0, (p_z + z) / scale);
				floors[_i].rotation.set(0, 0, p_r);
			}

			if (!start) return;
			if (r > -90 * Math.PI / 180) {
				r += g_plus;
			} else {
				gEnd();
			}
			g1.rotation.x = r;

			p();
		};
		init();
		function init() {
			p_r_arr = [0, 0, 0, 0, 0, 0];
			p_z_arr = [-0.4, -0.1, -0.1, -0.1, -0.1, -0.1];
		}
		function gEnd() {
			if (current_index != -1) return;
			pBegin(1);
		}
		function pBegin(index) {
			current_index = index;
		}
		function pEnd(index) {
			if (index < 4) {
				pBegin(index + 1);
			} else {
				pBegin(5);
			}
		}
		function p() {
			if (current_index >= 0) {
				if (current_index <= 4) {
					p_z_arr[current_index] += z_plus;
					if (p_z_arr[current_index] > z_max_arr[current_index]) {
						pEnd(current_index);
					}
				}

				for (var _i2 = 0; _i2 < current_index; _i2++) {
					p_r_arr[_i2] += r_plus_arr[_i2] * r_scale;
				}
			}
		}
	}
});
(function (global, factory) {
	if (typeof define === "function" && define.amd) {
		define(["exports", "Btn.js", "BtnTxt.js"], factory);
	} else if (typeof exports !== "undefined") {
		factory(exports, require("Btn.js"), require("BtnTxt.js"));
	} else {
		var mod = {
			exports: {}
		};
		factory(mod.exports, global.Btn, global.BtnTxt);
		global.LoadUI = mod.exports;
	}
})(this, function (exports, _Btn, _BtnTxt) {
	"use strict";

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.default = LoadUI;

	var _Btn2 = _interopRequireDefault(_Btn);

	var _BtnTxt2 = _interopRequireDefault(_BtnTxt);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : {
			default: obj
		};
	}

	var CAMERA_WIDTH = 20;
	var CAMERA_HEIGHT = 16;
	var BAR_BG_W = 0.7 * CAMERA_WIDTH;
	var BAR_W = 0.695 * CAMERA_WIDTH;

	function LoadUI() {
		this.__proto__ = new THREE.Group();

		this.setProgress = function (current, total) {};
	}
});
(function (global, factory) {
	if (typeof define === "function" && define.amd) {
		define(['../out/GameScene.js', '../out/GameStartPanel.js', '../out/GLB.js', 'LoadUI.js'], factory);
	} else if (typeof exports !== "undefined") {
		factory(require('../out/GameScene.js'), require('../out/GameStartPanel.js'), require('../out/GLB.js'), require('LoadUI.js'));
	} else {
		var mod = {
			exports: {}
		};
		factory(global.GameScene, global.GameStartPanel, global.GLB, global.LoadUI);
		global.Main = mod.exports;
	}
})(this, function (_GameScene, _GameStartPanel, _GLB, _LoadUI) {
	'use strict';

	var _GameScene2 = _interopRequireDefault(_GameScene);

	var _GameStartPanel2 = _interopRequireDefault(_GameStartPanel);

	var _GLB2 = _interopRequireDefault(_GLB);

	var _LoadUI2 = _interopRequireDefault(_LoadUI);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : {
			default: obj
		};
	}

	var DELAY = 200;

	var game_scene = new _GameScene2.default();
	_GLB2.default.game_scene = game_scene;
	var manager = game_scene.manager;

	var arr = [];
	var arr_sound = [
		// "m.mp3",
	];
	// ball模型材质参数：漫反射0.4 高光0.1 硬度4
	var arr_model = [];
	var arr_fbx = [
	// "ground.fbx",
	"baohe.fbx", "g1.fbx"];

	var total = arr.length;
	var total_sound = arr_sound.length;
	var total_model = arr_model.length;
	var total_fbx = arr_fbx.length;
	var loadUI;

	loadUI = new _LoadUI2.default();
	THREE.Loader.Handlers.add(/\.dds$/i, new THREE.DDSLoader());
	function loadRes() {
		var count = -1;
		loadNext();

		function loadNext() {
			count++;
			loadUI.setProgress.bind(loadUI)(count, total + total_sound + total_model + total_fbx);
			if (count >= total) {
				loadEnd();
			} else {
				new THREE.TextureLoader(manager).load("./assets/" + arr[count], function (res) {
					_GLB2.default.res[arr[count]] = res;
					loadNext();
				});
			}
		}
		function loadEnd() {
			loadSound();
		}
	}
	function loadSound() {
		var count = -1;
		loadNext();
		function loadNext() {
			count++;
			loadUI.setProgress.bind(loadUI)(total + count, total + total_sound + total_model + total_fbx);
			if (count >= total_sound) {
				loadEnd();
			} else {
				new THREE.AudioLoader().load("./assets/" + arr_sound[count], function (buffer) {
					_GLB2.default.res[arr_sound[count]] = buffer;
					loadNext();
				});
			}
		}
		function loadEnd() {
			loadModel();
		}
	}
	function loadModel() {
		var count = -1;
		loadNext();
		function loadNext() {
			count++;
			loadUI.setProgress.bind(loadUI)(total + total_sound + count, total + total_sound + total_model + total_fbx);
			if (count >= total_model) {
				loadEnd();
			} else {
				var l = new THREE.MTLLoader();
				// l.setBaseUrl("./assets/model/");
				l.setPath("./assets/model/").load(arr_model[count] + ".mtl", function (materials) {
					materials.preload();

					var loader = new THREE.OBJLoader();
					loader.setPath("./assets/model/").setMaterials(materials).load(arr_model[count] + ".obj", function (obj) {
						_GLB2.default.res[arr_model[count]] = obj;
						loadNext();
					});
				});
			}
		}
		function loadEnd() {
			loadFbx();
		}
	}
	function loadFbx() {
		var count = -1;
		loadNext();
		function loadNext() {
			count++;
			loadUI.setProgress.bind(loadUI)(total + total_sound + total_model + count, total + total_sound + total_model + total_fbx);
			if (count >= total_fbx) {
				loadEnd();
			} else {
				var l = new THREE.FBXLoader();
				l.load("./assets/model/" + arr_fbx[count], function (object) {
					_GLB2.default.res[arr_fbx[count]] = object;

					loadNext();
				});
			}
		}
		function loadEnd() {
			setTimeout(init, DELAY);
		}
	}

	// new THREE.TextureLoader(manager).load("./assets/loading_logo.png",function(res){
	// 	GLB.res["loading_logo.png"]=res;
	// 	loadUI=new LoadUI();
	// 	game_scene.addToScene(loadUI);

	// 	$(".loading").addClass("hide");
	// 	loadRes();
	// });

	loadRes();

	var game_start_panel;
	function init() {
		// ios上解决无法播放的问题
		// var s=new THREE.Audio(game_scene.listener);
		// s.setBuffer(GLB.res["m.mp3"]);
		function ios_sound_start() {
			// s.play();
			// s.stop();
		}
		$(document)[0].addEventListener("touchstart", start);
		$(document)[0].addEventListener("mousedown", start);

		$(".loading").addClass("hide");

		game_start_panel = new _GameStartPanel2.default(game_scene);
		game_scene.addToScene(game_start_panel);

		function start() {
			$(document)[0].removeEventListener("touchstart", start);
			$(document)[0].removeEventListener("mousedown", start);
			// ios_sound_start();
			$("#m")[0].play();
			game_start_panel.MyAPI.init.bind(game_start_panel)();

			$(".mask").addClass("hide");
			game_scene.addTouch();
		}
		// GLB.changeScene({type:"game_start"})
	}

	_GLB2.default.changeScene = function (obj) {
		if (_GLB2.default.handler_timeout) {
			clearTimeout(_GLB2.default.handler_timeout);
		}
		game_scene.removeFromScene(game_start_panel);
		game_scene.removeFromScene(game_play_panel);
		game_scene.removeFromScene(game_end_panel);
		game_scene.removeFromScene(game_help_panel);
		game_scene.changeColor(0);
		game_scene.subCameraEnable(false);
		if (obj.type == "game_start") {
			game_scene.subCameraEnable(true); // 开启多相机模式
			game_scene.addToScene(game_play_panel);
			game_play_panel.MyAPI.init.bind(game_play_panel)();
		} else if (obj.type == "game_over") {
			game_end_panel.MyAPI.init.bind(game_end_panel)(obj.data);
			game_scene.addToScene(game_end_panel);
		} else if (obj.type == "game_init") {
			game_start_panel.MyAPI.init.bind(game_start_panel)();
			game_scene.addToScene(game_start_panel);
		} else if (obj.type == "game_help") {
			game_scene.changeColor(1);
			game_help_panel.MyAPI.init.bind(game_help_panel)();
			game_scene.addToScene(game_help_panel);
		} else if (obj.type == "game_back") {
			game_start_panel.MyAPI.init.bind(game_start_panel)();
			game_scene.addToScene(game_start_panel);
		}
	};
});